/* Copyright 2013 Freescale Semiconductor, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *	 notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *	 notice, this list of conditions and the following disclaimer in the
 *	 documentation and/or other materials provided with the distribution.
 *     * Neither the name of Freescale Semiconductor nor the
 *	 names of its contributors may be used to endorse or promote products
 *	 derived from this software without specific prior written permission.
 *
 *
 * ALTERNATIVELY, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") as published by the Free Software
 * Foundation, either version 2 of that License or (at your option) any
 * later version.
 *
 * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef	__SIMPLE_PROTO_TEST_VECTOR_H
#define	__SIMPLE_PROTO_TEST_VECTOR_H

#include "simple_proto.h"

/**< Integer number of 32-bit items */
#define NO_OF_WORDS(bitlen) \
	(((bitlen) >> 5) + ((31 + ((bitlen) & 0x1F)) >> 5))

/**< Integer number of 8-bit items */
#define NO_OF_BYTES(bitlen) (((bitlen) >> 3) + !!((bitlen) & 0x7))

/**< Integer number of bits in given bytes  */
#define NO_OF_BITS(bytelen)	(bytelen << 3)

#define MACSEC_ICV_SIZE     16
#define MACSEC_SECTAG_SIZE  16
#define MACSEC_IV_SCI_SIZE  8
#define MACSEC_IV_SIZE      12
#define MACSEC_SCI_ENABLE   1
#define MACSEC_ETYPE_SIZE   2
#define MACSEC_TCIAN_SIZE   1
#define MACSEC_IV_PN_SIZE   4
#define MACSEC_KEY_SIZE     16
#define MACSEC_GMAC_TEST_ID 4

#define MACSEC_MAX_TEST_PLAIN_PACKET_SIZE	79
#define MACSEC_MAX_TEST_ENCRYPT_PACKET_SIZE	\
					(MACSEC_MAX_TEST_PLAIN_PACKET_SIZE +\
					 MACSEC_ICV_SIZE +\
					 MACSEC_SECTAG_SIZE)

#define PDCP_MAX_KEY_LEN	16 /* bytes */

#define PDCP_HFN_DUMMY_VAL	0x1234

/** test vector structure which holds essential initialization vector, key etc;
 *  and cipher/plain text to compare with encapsulated/decapsulated data
 *  generated by SEC
 */
struct ref_vector_s {
	union {
		uintptr_t key;			/**< Used when the key contents
						     are supposed to be copied
						     by RTA as immediate in the
						     created descriptor. */
		dma_addr_t dma_addr_key;	/**< Used when a pointer to
						     the key is supposed to be
						     used as-is by RTA in the
						     created descriptor. */
	};
	unsigned char cipher_alg;
	unsigned short cipher_keylen;
	unsigned char auth_alg;
	union {
		uintptr_t auth_key;		/**< Used when the key contents
						     are supposed to be copied
						     by RTA as immediate in the
						     created descriptor. */
		dma_addr_t dma_addr_auth_key;	/**< Used when a pointer to
						     the key is supposed to be
						     used as-is by RTA in the
						     created descriptor. */
	};
	unsigned short auth_keylen;
	union {
		struct {
			uint64_t sci;
			uint16_t ethertype;
			uint8_t tci_an;
			uint32_t pn;
		} macsec;
		struct {
			uint8_t encap_opts;
			uint8_t decap_opts;
			uint32_t pn;
			uint16_t ar_len;
		} wimax;
		struct {
			unsigned short sns;
			unsigned short bearer;
			unsigned short direction;
			uint32_t hfn;
			uint32_t hfn_threshold;
		} pdcp;
		struct {
			uint8_t *cipher_salt;
			uint32_t roc;
			uint16_t seqnum;
			uint8_t n_tag;
			uint8_t options; /* optional */
			uint32_t mki;    /* optional */
		} srtp;
		struct {
			uint16_t mac_hdr_len;
			uint64_t pn;
			uint8_t priority;
			uint8_t key_id;
		} wifi;
	} __packed pdb;
	union {
		struct {
			uint16_t protinfo;
		} wimax;
	} __packed flags;
	uint32_t length;
	uint8_t *plaintext;
	uint8_t *ciphertext;
} __packed;

static uint8_t macsec_reference_key[][MACSEC_KEY_SIZE] = {
	/* gcm - encryption and authentication */
	/* 54 bytes */
	{0x07, 0x1B, 0x11, 0x3B, 0x0C, 0xA7, 0x43, 0xFE, 0xCC, 0xCF, 0x3D, 0x05,
	 0x1F, 0x73, 0x73, 0x82},
	/* 60 bytes */
	{0xAD, 0x7A, 0x2B, 0xD0, 0x3E, 0xAC, 0x83, 0x5A, 0x6F, 0x62, 0x0F, 0xDC,
	 0xB5, 0x06, 0xB3, 0x45},
	/* 60 bytes */
	{0x01, 0x3F, 0xE0, 0x0B, 0x5F, 0x11, 0xBE, 0x7F, 0x86, 0x6D, 0x0C, 0xBB,
	 0xC5, 0x5A, 0x7A, 0x90},
	/* 75 bytes */
	{0x88, 0xEE, 0x08, 0x7F, 0xD9, 0x5D, 0xA9, 0xFB, 0xF6, 0x72, 0x5A, 0xA9,
	 0xD7, 0x57, 0xB0, 0xCD},
	/* gmac - only authentication */
	/* 54 bytes */
	{0xAD, 0x7A, 0x2B, 0xD0, 0x3E, 0xAC, 0x83, 0x5A, 0x6F, 0x62, 0x0F, 0xDC,
	 0xB5, 0x06, 0xB3, 0x45},
	/* 60 bytes */
	{0x07, 0x1B, 0x11, 0x3B, 0x0C, 0xA7, 0x43, 0xFE, 0xCC, 0xCF, 0x3D, 0x05,
	 0x1F, 0x73, 0x73, 0x82},
	/* 65 bytes */
	{0x01, 0x3F, 0xE0, 0x0B, 0x5F, 0x11, 0xBE, 0x7F, 0x86, 0x6D, 0x0C, 0xBB,
	 0xC5, 0x5A, 0x7A, 0x90},
	/* 79 bytes */
	{0x88, 0xEE, 0x08, 0x7F, 0xD9, 0x5D, 0xA9, 0xFB, 0xF6, 0x72, 0x5A, 0xA9,
	 0xD7, 0x57, 0xB0, 0xCD}
};

static uint64_t macsec_reference_iv_sci[] = {
	/* gcm - encryption and authentication */
	/* 54 bytes */
	0xF0761E8DCD3D0001ull,
	/* 60 bytes */
	0x12153524C0895E81ull,
	/* 60 bytes */
	0x7CFDE9F9E33724C6ull,
	/* 75 bytes */
	0x7AE8E2CA4EC50001ull,
	/* gmac - only authentication */
	/* 54 bytes */
	0x12153524C0895E81ull,
	/* 60 bytes */
	0xF0761E8DCD3D0001ull,
	/* 65 bytes */
	0x7CFDE9F9E33724C6ull,
	/* 79 bytes */
	0x7AE8E2CA4EC50001ull
};


static uint32_t macsec_reference_iv_pn[] = {
	/* gcm - encryption and authentication */
	/* 54 bytes */
	0x76D457ED,
	/* 60 bytes */
	0xB2C28465,
	/* 61 bytes */
	0x8932D612,
	/* 75 bytes */
	0x2E58495C,
	/*gmac - only authentication */
	/* 54 bytes */
	0xB2C28465,
	/* 60 bytes */
	0x76D457ED,
	/* 65 bytes */
	0x8932D612,
	/* 79 bytes */
	0x2E58495C
};

static uint8_t macsec_reference_sectag_tcian[] = {
	/* gcm - encryption and authentication */
	/* 54 bytes */
	0x4C,
	/* 60 bytes */
	0x2E,
	/* 61 bytes */
	0x2F,
	/* 75 bytes */
	0x4D,
	/*gmac - only authentication */
	/* 54 bytes */
	0x22, /* E bit = 0, no encrypt */
	/* 60 bytes */
	0x40,
	/* 65 bytes */
	0x23,
	/* 79 bytes */
	0x41
};

static uint16_t macsec_reference_sectag_etype[] = {
	/* gcm - encryption and authentication */
	/* 54 bytes */
	0x88E5,
	/* 60 bytes */
	0x88E5,
	/* 61 bytes */
	0x88E5,
	/* 75 bytes */
	0x88E5,
	/*gmac - only authentication */
	/* 54 bytes */
	0x88E5,
	/* 60 bytes */
	0x88E5,
	/* 65 bytes */
	0x88E5,
	/* 79 bytes */
	0x88E5
};

/** length in bits */
static uint32_t macsec_reference_length[] = {
	432, 480, 488, 600, 432, 480, 520, 632
};

static uint8_t macsec_reference_plaintext[][MACSEC_MAX_TEST_PLAIN_PACKET_SIZE] = {
	/* gcm - encryption and authentication */
	/* 54 bytes */
	{0xE2, 0x01, 0x06, 0xD7, 0xCD, 0x0D, 0xF0, 0x76, 0x1E, 0x8D, 0xCD, 0x3D,
	 0x08, 0x00, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
	 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
	 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
	 0x31, 0x32, 0x33, 0x34, 0x00, 0x04},
	/* 60 bytes */
	{0xD6, 0x09, 0xB1, 0xF0, 0x56, 0x63, 0x7A, 0x0D, 0x46, 0xDF, 0x99, 0x8D,
	 0x08, 0x00, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
	 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
	 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
	 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x00,
	 0x02},
	/* 61 bytes */
	{0x84, 0xC5, 0xD5, 0x13, 0xD2, 0xAA, 0xF6, 0xE5, 0xBB, 0xD2, 0x72, 0x77,
	 0x08, 0x00, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
	 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
	 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
	 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x00,
	 0x06},
	/* 75 bytes */
	{0x68, 0xF2, 0xE7, 0x76, 0x96, 0xCE, 0x7A, 0xE8, 0xE2, 0xCA, 0x4E, 0xC5,
	 0x08, 0x00, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
	 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
	 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
	 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C,
	 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
	 0x49, 0x00, 0x08},
	/* gmac - only authentication */
	/* 54 bytes */
	{0xD6, 0x09, 0xB1, 0xF0, 0x56, 0x63, 0x7A, 0x0D, 0x46, 0xDF, 0x99, 0x8D,
	 0x08, 0x00, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
	 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
	 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
	 0x31, 0x32, 0x33, 0x34, 0x00, 0x01},
	/* 60 bytes */
	{0xE2, 0x01, 0x06, 0xD7, 0xCD, 0x0D, 0xF0, 0x76, 0x1E, 0x8D, 0xCD, 0x3D,
	 0x08, 0x00, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
	 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
	 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
	 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x00, 0x03
	},
	/* 65 bytes */
	{0x84, 0xC5, 0xD5, 0x13, 0xD2, 0xAA, 0xF6, 0xE5, 0xBB, 0xD2, 0x72, 0x77,
	 0x08, 0x00, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
	 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
	 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
	 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C,
	 0x3D, 0x3E, 0x3F, 0x00, 0x05},
	 /* 79 bytes */
	{0x68, 0xF2, 0xE7, 0x76, 0x96, 0xCE, 0x7A, 0xE8, 0xE2, 0xCA, 0x4E, 0xC5,
	 0x08, 0x00, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
	 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
	 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
	 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C,
	 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
	 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x00, 0x07}
};

static uint8_t macsec_reference_ciphertext[][MACSEC_MAX_TEST_ENCRYPT_PACKET_SIZE] = {
	/* gcm - encryption and authentication */
	/* 54 bytes */
	{0xE2, 0x01, 0x06, 0xD7, 0xCD, 0x0D, 0xF0, 0x76, 0x1E, 0x8D, 0xCD, 0x3D,
	 0x88, 0xE5, 0x4C, 0x2A, 0x76, 0xD4, 0x57, 0xED, 0x13, 0xB4, 0xC7, 0x2B,
	 0x38, 0x9D, 0xC5, 0x01, 0x8E, 0x72, 0xA1, 0x71, 0xDD, 0x85, 0xA5, 0xD3,
	 0x75, 0x22, 0x74, 0xD3, 0xA0, 0x19, 0xFB, 0xCA, 0xED, 0x09, 0xA4, 0x25,
	 0xCD, 0x9B, 0x2E, 0x1C, 0x9B, 0x72, 0xEE, 0xE7, 0xC9, 0xDE, 0x7D, 0x52,
	 0xB3, 0xF3, 0xD6, 0xA5, 0x28, 0x4F, 0x4A, 0x6D, 0x3F, 0xE2, 0x2A, 0x5D,
	 0x6C, 0x2B, 0x96, 0x04, 0x94, 0xC3},
	/* 60 bytes */
	{0xD6, 0x09, 0xB1, 0xF0, 0x56, 0x63, 0x7A, 0x0D, 0x46, 0xDF, 0x99, 0x8D,
	 0x88, 0xE5, 0x2E, 0x00, 0xB2, 0xC2, 0x84, 0x65, 0x12, 0x15, 0x35, 0x24,
	 0xC0, 0x89, 0x5E, 0x81, 0x70, 0x1A, 0xFA, 0x1C, 0xC0, 0x39, 0xC0, 0xD7,
	 0x65, 0x12, 0x8A, 0x66, 0x5D, 0xAB, 0x69, 0x24, 0x38, 0x99, 0xBF, 0x73,
	 0x18, 0xCC, 0xDC, 0x81, 0xC9, 0x93, 0x1D, 0xA1, 0x7F, 0xBE, 0x8E, 0xDD,
	 0x7D, 0x17, 0xCB, 0x8B, 0x4C, 0x26, 0xFC, 0x81, 0xE3, 0x28, 0x4F, 0x2B,
	 0x7F, 0xBA, 0x71, 0x3D, 0x4F, 0x8D, 0x55, 0xE7, 0xD3, 0xF0, 0x6F, 0xD5,
	 0xA1, 0x3C, 0x0C, 0x29, 0xB9, 0xD5, 0xB8, 0x80},
	/* 61 bytes */
	{0x84, 0xC5, 0xD5, 0x13, 0xD2, 0xAA, 0xF6, 0xE5, 0xBB, 0xD2, 0x72, 0x77,
	 0x88, 0xE5, 0x2F, 0x00, 0x89, 0x32, 0xD6, 0x12, 0x7C, 0xFD, 0xE9, 0xF9,
	 0xE3, 0x37, 0x24, 0xC6, 0x3A, 0x4D, 0xE6, 0xFA, 0x32, 0x19, 0x10, 0x14,
	 0xDB, 0xB3, 0x03, 0xD9, 0x2E, 0xE3, 0xA9, 0xE8, 0xA1, 0xB5, 0x99, 0xC1,
	 0x4D, 0x22, 0xFB, 0x08, 0x00, 0x96, 0xE1, 0x38, 0x11, 0x81, 0x6A, 0x3C,
	 0x9C, 0x9B, 0xCF, 0x7C, 0x1B, 0x9B, 0x96, 0xDA, 0x80, 0x92, 0x04, 0xE2,
	 0x9D, 0x0E, 0x2A, 0x76, 0x42, 0xBF, 0xD3, 0x10, 0xA4, 0x83, 0x7C, 0x81,
	 0x6C, 0xCF, 0xA5, 0xAC, 0x23, 0xAB, 0x00, 0x39, 0x88},
	/* 75 bytes */
	{0x68, 0xF2, 0xE7, 0x76, 0x96, 0xCE, 0x7A, 0xE8, 0xE2, 0xCA, 0x4E, 0xC5,
	 0x88, 0xE5, 0x4D, 0x00, 0x2E, 0x58, 0x49, 0x5C, 0xC3, 0x1F, 0x53, 0xD9,
	 0x9E, 0x56, 0x87, 0xF7, 0x36, 0x51, 0x19, 0xB8, 0x32, 0xD2, 0xAA, 0xE7,
	 0x07, 0x41, 0xD5, 0x93, 0xF1, 0xF9, 0xE2, 0xAB, 0x34, 0x55, 0x77, 0x9B,
	 0x07, 0x8E, 0xB8, 0xFE, 0xAC, 0xDF, 0xEC, 0x1F, 0x8E, 0x3E, 0x52, 0x77,
	 0xF8, 0x18, 0x0B, 0x43, 0x36, 0x1F, 0x65, 0x12, 0xAD, 0xB1, 0x6D, 0x2E,
	 0x38, 0x54, 0x8A, 0x2C, 0x71, 0x9D, 0xBA, 0x72, 0x28, 0xD8, 0x40, 0x88,
	 0xF8, 0x75, 0x7A, 0xDB, 0x8A, 0xA7, 0x88, 0xD8, 0xF6, 0x5A, 0xD6, 0x68,
	 0xBE, 0x70, 0xE7},
	/* gmac - only authentication */
	/* 54 bytes */
	{0xD6, 0x09, 0xB1, 0xF0, 0x56, 0x63, 0x7A, 0x0D, 0x46, 0xDF, 0x99, 0x8D,
	 0x88, 0xE5, 0x22, 0x2A, 0xB2, 0xC2, 0x84, 0x65, 0x12, 0x15, 0x35, 0x24,
	 0xC0, 0x89, 0x5E, 0x81, 0x08, 0x00, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
	 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
	 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C,
	 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x00, 0x01, 0xF0, 0x94,
	 0x78, 0xA9, 0xB0, 0x90, 0x07, 0xD0, 0x6F, 0x46, 0xE9, 0xB6, 0xA1, 0xDA,
	 0x25, 0xDD},
	/* 60 bytes */
	{0xE2, 0x01, 0x06, 0xD7, 0xCD, 0x0D, 0xF0, 0x76, 0x1E, 0x8D, 0xCD, 0x3D,
	 0x88, 0xE5, 0x40, 0x00, 0x76, 0xD4, 0x57, 0xED, 0x08, 0x00, 0x0F, 0x10,
	 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C,
	 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
	 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34,
	 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x00, 0x03, 0x0C, 0x01, 0x7B, 0xC7,
	 0x3B, 0x22, 0x7D, 0xFC, 0xC9, 0xBA, 0xFA, 0x1C, 0x41, 0xAC, 0xC3, 0x53
	},
	/* 65 bytes */
	{0x84, 0xC5, 0xD5, 0x13, 0xD2, 0xAA, 0xF6, 0xE5, 0xBB, 0xD2, 0x72, 0x77,
	 0x88, 0xE5, 0x23, 0x00, 0x89, 0x32, 0xD6, 0x12, 0x7C, 0xFD, 0xE9, 0xF9,
	 0xE3, 0x37, 0x24, 0xC6, 0x08, 0x00, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
	 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
	 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C,
	 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
	 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x00, 0x05, 0x21, 0x78, 0x67,
	 0xe5, 0x0c, 0x2d, 0xad, 0x74, 0xc2, 0x8c, 0x3b, 0x50, 0xab, 0xdf, 0x69,
	 0x5a},
	/* 79 bytes */
	{0x68, 0xF2, 0xE7, 0x76, 0x96, 0xCE, 0x7A, 0xE8, 0xE2, 0xCA, 0x4E, 0xC5,
	 0x88, 0xE5, 0x41, 0x00, 0x2E, 0x58, 0x49, 0x5C, 0x08, 0x00, 0x0F, 0x10,
	 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C,
	 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
	 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34,
	 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40,
	 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C,
	 0x4D, 0x00, 0x07, 0x07, 0x92, 0x2B, 0x8E, 0xBC, 0xF1, 0x0B, 0xB2, 0x29,
	 0x75, 0x88, 0xCA, 0x4C, 0x61, 0x45, 0x23}
};

/* WiMAX reference vectors, according to IEEE Std 802.16-2009
 * "Part 16: Air Interface for Broadband Wireless Access Systems"
 */

#define WIMAX_GMH_SIZE	6  /**< WiMAX Generic Mac Header size */
#define WIMAX_PN_SIZE	4  /**< WiMAX Packet Number size */
#define WIMAX_KEY_SIZE	16 /**< WiMAX Key size */
#define WIMAX_ICV_SIZE	8  /**< WiMAX Integrity Check Value size */
#define WIMAX_FCS_SIZE	4  /**< WiMAX Frame Check Sequence size */
#define WIMAX_MAX_FRAME_SIZE	2047

static uint8_t wimax_reference_pdb_opts[] = {
	/* Test Set 1 */
	WIMAX_PDBOPTS_FCS,
	/* Test Set 2 */
	WIMAX_PDBOPTS_FCS,
	/* Test Set 3 */
	WIMAX_PDBOPTS_FCS,
	/* Test Set 4 */
	WIMAX_PDBOPTS_FCS,
};

static uint16_t wimax_reference_protinfo[] = {
	/* Test Set 1 */
	OP_PCL_WIMAX_OFDM,
	/* Test Set 2 */
	OP_PCL_WIMAX_OFDMA,
	/* Test Set 3 */
	OP_PCL_WIMAX_OFDM,
	/* Test Set 4 */
	OP_PCL_WIMAX_OFDMA,
};

static uint8_t wimax_reference_gmh[][WIMAX_GMH_SIZE] = {
	/* Test Set 1 */
	{0x00, 0x40, 0x0A, 0x06, 0xC4, 0x30},

	/* Test Set 2 */
	{0x00, 0x40, 0x0A, 0x06, 0xC4, 0x30},

	/* Test Set 3 */
	{0x00, 0x40, 0x27, 0x7E, 0xB2, 0xAD},

	/* Test Set 4 */
	{0x00, 0x40, 0x27, 0x7E, 0xB2, 0xAD},
};

static uint8_t wimax_reference_payload[][33] = {
	/* Test Set 1 */
	{0x00, 0x01, 0x02, 0x03},

	/* Test Set 2 */
	{0x00, 0x01, 0x02, 0x03},

	/* Test Set 3 */
	{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20},

	/* Test Set 4 */
	{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20},
};

/* input packet length in bits */
static uint32_t wimax_reference_length[] = {80, 80, 312, 312};

static uint8_t wimax_reference_key[][WIMAX_KEY_SIZE] = {
	/* Test Set 1 */
	{0xD5, 0x0E, 0x18, 0xA8, 0x44, 0xAC, 0x5B, 0xF3,
	0x8E, 0x4C, 0xD7, 0x2D, 0x9B, 0x09, 0x42, 0xE5},

	/* Test Set 2 */
	{0xD5, 0x0E, 0x18, 0xA8, 0x44, 0xAC, 0x5B, 0xF3,
	0x8E, 0x4C, 0xD7, 0x2D, 0x9B, 0x09, 0x42, 0xE5},

	/* Test Set 3 */
	{0xB7, 0x4E, 0xB0, 0xE4, 0xF8, 0x1A, 0xD6, 0x3D,
	0x12, 0x1B, 0x7E, 0x9A, 0xEC, 0xCD, 0x26, 0x8F},

	/* Test Set 4 */
	{0xB7, 0x4E, 0xB0, 0xE4, 0xF8, 0x1A, 0xD6, 0x3D,
	0x12, 0x1B, 0x7E, 0x9A, 0xEC, 0xCD, 0x26, 0x8F},
};

static uint8_t wimax_reference_pn[][WIMAX_PN_SIZE] = {
	/* Test Set 1 */
	{0x21, 0x57, 0xF6, 0xBC},

	/* Test Set 2 */
	{0x21, 0x57, 0xF6, 0xBC},

	/* Test Set 3 */
	{0x78, 0xD0, 0x7D, 0x08},

	/* Test Set 4 */
	{0x78, 0xD0, 0x7D, 0x08},
};

static uint8_t wimax_reference_enc_gmh[][WIMAX_GMH_SIZE] = {
	/* Test Set 1 */
	{0x40, 0x40, 0x1A, 0x06, 0xC4, 0x5A},

	/* Test Set 2 */
	{0x40, 0x40, 0x1A, 0x06, 0xC4, 0x5A},

	/* Test Set 3 */
	{0x40, 0x40, 0x37, 0x7E, 0xB2, 0xC7},

	/* Test Set 4 */
	{0x40, 0x40, 0x37, 0x7E, 0xB2, 0xC7},
};

static uint8_t wimax_reference_enc_pn[][WIMAX_PN_SIZE] = {
	/* Test Set 1 */
	{0xBC, 0xF6, 0x57, 0x21},

	/* Test Set 2 */
	{0xBC, 0xF6, 0x57, 0x21},

	/* Test Set 3 */
	{0x08, 0x7D, 0xD0, 0x78},

	/* Test Set 4 */
	{0x08, 0x7D, 0xD0, 0x78},
};

static uint8_t wimax_reference_enc_payload[][33] = {
	/* Test Set 1 */
	{0xE7, 0x55, 0x36, 0xC8},

	/* Test Set 2 */
	{0xE7, 0x55, 0x36, 0xC8},

	/* Test Set 3 */
	{0x71, 0x3F, 0xB1, 0x22, 0xB9, 0x73, 0x4F, 0xDB,
	0xFD, 0x68, 0x2E, 0xAD, 0x9D, 0xCA, 0x9F, 0x44,
	0x1F, 0x62, 0xFE, 0x0F, 0x4A, 0x2C, 0x45, 0xB5,
	0x53, 0x17, 0x3D, 0x66, 0x5B, 0x2D, 0x53, 0xC1,
	0xB3},

	/* Test Set 4 */
	{0x71, 0x3F, 0XB1, 0x22, 0xB9, 0x73, 0x4F, 0xDB,
	0xFD, 0x68, 0x2E, 0xAD, 0x9D, 0xCA, 0x9F, 0x44,
	0x1F, 0x62, 0xFE, 0x0F, 0x4A, 0x2C, 0x45, 0xB5,
	0x53, 0x17, 0x3D, 0x66, 0x5B, 0x2D, 0x53, 0xC1,
	0xB3},
};

static uint8_t wimax_reference_enc_icv[][WIMAX_ICV_SIZE] = {
	/* Test Set 1 */
	{0x27, 0xA8, 0xD7, 0x1B, 0x43, 0x2C, 0xA5, 0x48},

	/* Test Set 2 */
	{0x27, 0xA8, 0xD7, 0x1B, 0x43, 0x2C, 0xA5, 0x48},

	/* Test Set 3 */
	{0xE7, 0xE4, 0x8D, 0x2D, 0xB7, 0x61, 0xCF, 0x94},

	/* Test Set 4 */
	{0xE7, 0xE4, 0x8D, 0x2D, 0xB7, 0x61, 0xCF, 0x94},
};

static uint8_t wimax_reference_fcs[][WIMAX_FCS_SIZE] = {
	/* Test Set 1 */
	{0xCB, 0xB6, 0x5F, 0x48},

	/* Test Set 2 */
	{0x1B, 0xD1, 0xBA, 0x21},

	/* Test Set 3 */
	{0x92, 0x1B, 0x32, 0x41},

	/* Test Set 4 */
	{0xFD, 0x03, 0x7B, 0x1D},
};

/*
 * PDCP test vectors and related structures.
 */
#define PDCP_CPLANE_OFFSET	0
#define PDCP_UPLANE_OFFSET	32
#define PDCP_SHORT_MAC_OFFSET	56

struct pdcp_test_param {
	uint8_t type;
	uint8_t cipher_algorithm;
	uint8_t integrity_algorithm;
	const char *name;
};

static struct pdcp_test_param pdcp_test_params[] = {
	{
	 .name =
	 "PDCP Control Plane with NULL encryption and NULL integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP Control Plane with NULL encryption and NULL integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP Control Plane with NULL encryption and SNOW f9 integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_SNOW,
	 },
	{
	 .name =
	 "PDCP Control Plane with NULL encryption and SNOW f9 integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_SNOW,
	 },
	{
	 .name =
	 "PDCP Control Plane with NULL encryption and AES CMAC integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_AES,
	 },
	{
	 .name =
	 "PDCP Control Plane with NULL encryption and AES CMAC integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_AES,
	 },
	{
	 .name =
	 "PDCP Control Plane with NULL encryption and ZUC integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_ZUC,
	 },
	{
	 .name =
	 "PDCP Control Plane with NULL encryption and ZUC integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_ZUC,
	 },
	{
	 .name =
	 "PDCP Control Plane with SNOW f8 encryption and NULL integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP Control Plane with SNOW f8 encryption and NULL integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP Control Plane with SNOW f8 encryption and SNOW f9 integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_SNOW,
	 },
	{
	 .name =
	 "PDCP Control Plane with SNOW f8 encryption and SNOW f9 integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_SNOW,
	 },
	{
	 .name =
	 "PDCP Control Plane with SNOW f8 encryption and AES CMAC integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_AES,
	 },
	{
	 .name =
	 "PDCP Control Plane with SNOW f8 encryption and AES CMAC integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_AES,
	 },
	{
	 .name =
	 "PDCP Control Plane with SNOW f8 encryption and ZUC integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_ZUC,
	 },
	{
	 .name =
	 "PDCP Control Plane with SNOW f8 encryption and ZUC integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_ZUC,
	 },
	{
	 .name =
	 "PDCP Control Plane with AES CTR encryption and NULL integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP Control Plane with AES CTR encryption and NULL integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP Control Plane with AES CTR encryption and SNOW f9 integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_SNOW,
	 },
	{
	 .name =
	 "PDCP Control Plane with AES CTR encryption and SNOW f9 integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_SNOW,
	 },
	{
	 .name =
	 "PDCP Control Plane with AES CTR encryption and AES CMAC integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_AES,
	 },
	{
	 .name =
	 "PDCP Control Plane with AES CTR encryption and AES CMAC integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_AES,
	 },
	{
	 .name =
	 "PDCP Control Plane with AES CTR encryption and ZUC integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_ZUC,
	 },
	{
	 .name =
	 "PDCP Control Plane with AES CTR encryption and ZUC integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_ZUC,
	 },
	{
	 .name =
	 "PDCP Control Plane with ZUC encryption and NULL integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP Control Plane with ZUC encryption and NULL integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP Control Plane with ZUC encryption and SNOW f9 integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_SNOW,
	 },
	{
	 .name =
	 "PDCP Control Plane with ZUC encryption and SNOW f9 integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_SNOW,
	 },
	{
	 .name =
	 "PDCP Control Plane with ZUC encryption and AES CMAC integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_AES,
	 },
	{
	 .name =
	 "PDCP Control Plane with ZUC encryption and AES CMAC integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_AES,
	 },
	{
	 .name =
	 "PDCP Control Plane with ZUC encryption and ZUC integrity Uplink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_ZUC,
	 },
	{
	 .name =
	 "PDCP Control Plane with ZUC encryption and ZUC integrity Downlink",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_ZUC,
	 },
	{
	 .name =
	 "PDCP User Plane with NULL encryption Uplink with long sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with NULL encryption Downlink with long sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with NULL encryption Uplink with short sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with NULL encryption Downlink with short sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with NULL encryption Uplink with 15 bit sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with NULL encryption Downlink with 15 bit sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with SNOW f8 encryption Uplink with long sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with SNOW f8 encryption Downlink with long sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with SNOW f8 encryption Uplink with short sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with SNOW f8 encryption Downlink with short sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with SNOW f8 encryption Uplink with 15 bit sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with SNOW f8 encryption Downlink with 15 bit sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_SNOW,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with AES CTR encryption Uplink with long sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with AES CTR encryption Downlink with long sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with AES CTR encryption Uplink with short sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with AES CTR encryption Downlink with short sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with AES CTR encryption Uplink with 15 bit sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with AES CTR encryption Downlink with 15 bit sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_AES,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with ZUC encryption Uplink with long sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with ZUC encryption Downlink with long sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with ZUC encryption Uplink with short sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with ZUC encryption Downlink with short sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with ZUC encryption Uplink with 15 bit sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name =
	 "PDCP User Plane with ZUC encryption Downlink with 15 bit sequence number",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_ZUC,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name = "PDCP Short MAC-I with NULL integrity",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_NULL,
	 },
	{
	 .name = "PDCP Short MAC-I with SNOW f9 integrity",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_SNOW,
	 },
	{
	 .name = "PDCP Short MAC-I with AES CMAC integrity",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_AES,
	 },
	{
	 .name = "PDCP Short MAC-I with ZUC integrity",
	 .cipher_algorithm = PDCP_CIPHER_TYPE_NULL,
	 .integrity_algorithm = PDCP_AUTH_TYPE_ZUC,
	 },
};

static uint32_t pdcp_test_hfn[] = {
	/* Control Plane w/NULL enc. + NULL int. UL */
	0x000fa557,
	/* Control Plane w/NULL enc. + NULL int. DL */
	0x000fa557,
	/* Control Plane w/NULL enc. + SNOW f9 int. UL */
	0x000fa557,
	/* Control Plane w/NULL enc. + SNOW f9 int. DL */
	0x000fa557,
	/* Control Plane w/NULL enc. + AES CMAC int. UL */
	0x000fa557,
	/* Control Plane w/NULL enc. + AES CMAC int. DL */
	0x000fa557,
	/* Control Plane w/NULL enc. + ZUC int. UL */
	0x000fa557,
	/* Control Plane w/NULL enc. + ZUC int. DL */
	0x000fa557,
	/* Control Plane w/SNOW f8 enc. + NULL int. UL */
	0x000fa557,
	/* Control Plane w/SNOW f8 enc. + NULL int. DL */
	0x000fa557,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. UL */
	0x000fa557,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. DL */
	0x000fa557,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. UL */
	0x000fa557,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. DL */
	0x000fa557,
	/* Control Plane w/SNOW f8 enc. + ZUC int. UL */
	0x000fa557,
	/* Control Plane w/SNOW f8 enc. + ZUC int. DL */
	0x000fa557,
	/* Control Plane w/AES CTR enc. + NULL int. UL */
	0x000fa557,
	/* Control Plane w/AES CTR enc. + NULL int. DL */
	0x000fa557,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. UL */
	0x000fa557,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. DL */
	0x000fa557,
	/* Control Plane w/AES CTR enc. + AES CMAC int. UL */
	0x000fa557,
	/* Control Plane w/AES CTR enc. + AES CMAC int. DL */
	0x000fa557,
	/* Control Plane w/AES CTR enc. + ZUC int. UL */
	0x000fa557,
	/* Control Plane w/AES CTR enc. + ZUC int. DL */
	0x000fa557,
	/* Control Plane w/ZUC enc. + NULL int. UL */
	0x000fa557,
	/* Control Plane w/ZUC enc. + NULL int. DL */
	0x000fa557,
	/* Control Plane w/ZUC enc. + SNOW f9 int. UL */
	0x000fa557,
	/* Control Plane w/ZUC enc. + SNOW f9 int. DL */
	0x000fa557,
	/* Control Plane w/ZUC enc. + AES CMAC int. UL */
	0x000fa557,
	/* Control Plane w/ZUC enc. + AES CMAC int. DL */
	0x000fa557,
	/* Control Plane w/ZUC enc. + ZUC int. UL */
	0x000fa557,
	/* Control Plane w/ZUC enc. + ZUC int. DL */
	0x000fa557,
	/* User Plane w/NULL enc. UL LONG SN */
	0x000fa557,
	/* User Plane w/NULL enc. DL LONG SN */
	0x000fa557,
	/* User Plane w/NULL enc. UL SHORT SN */
	0x000fa557,
	/* User Plane w/NULL enc. DL SHORT SN */
	0x000fa557,
	/* User Plane w/NULL enc. UL 15 BIT SN */
	0x000fa557,
	/* User Plane w/NULL enc. DL 15 BIT SN */
	0x000fa557,
	/* User Plane w/SNOW f8 enc. UL LONG SN */
	0x000fa557,
	/* User Plane w/SNOW f8 enc. DL LONG SN */
	0x000fa557,
	/* User Plane w/SNOW f8 enc. UL SHORT SN */
	0x000fa557,
	/* User Plane w/SNOW f8 enc. DL SHORT SN */
	0x000fa557,
	/* User Plane w/SNOW f8 enc. UL 15 BIT SN */
	0x000fa557,
	/* User Plane w/SNOW f8 enc. DL 15 BIT SN */
	0x000fa557,
	/* User Plane w/AES CTR enc. UL LONG SN */
	0x000fa557,
	/* User Plane w/AES CTR enc. DL LONG SN */
	0x000fa557,
	/* User Plane w/AES CTR enc. UL SHORT SN */
	0x000fa557,
	/* User Plane w/AES CTR enc. DL SHORT SN */
	0x000fa557,
	/* User Plane w/AES CTR enc. UL 15 BIT SN */
	0x000fa557,
	/* User Plane w/AES CTR enc. DL 15 BIT SN */
	0x000fa557,
	/* User Plane w/ZUC enc. UL LONG SN */
	0x000fa557,
	/* User Plane w/ZUC enc. DL LONG SN */
	0x000fa557,
	/* User Plane w/ZUC enc. UL SHORT SN */
	0x000fa557,
	/* User Plane w/ZUC enc. DL SHORT SN */
	0x000fa557,
	/* User Plane w/ZUC enc. UL 15 BIT SN */
	0x000fa557,
	/* User Plane w/ZUC enc. DL 15 BIT SN */
	0x000fa557,
	/* Short-MAC w/NULL int. */
	0x00000000,
	/* Short-MAC w/SNOW f9 int. */
	0x00000000,
	/* Short-MAC w/AES CMAC int. */
	0x00000000,
	/* Short-MAC w/ZUC int. */
	0x00000000,
};

static uint32_t pdcp_test_hfn_threshold[] = {
	/* Control Plane w/NULL enc. + NULL int. UL */
	0x000fa558,
	/* Control Plane w/NULL enc. + NULL int. DL */
	0x000fa558,
	/* Control Plane w/NULL enc. + SNOW f9 int. UL */
	0x000fa558,
	/* Control Plane w/NULL enc. + SNOW f9 int. DL */
	0x000fa558,
	/* Control Plane w/NULL enc. + AES CMAC int. UL */
	0x000fa558,
	/* Control Plane w/NULL enc. + AES CMAC int. DL */
	0x000fa558,
	/* Control Plane w/NULL enc. + ZUC int. UL */
	0x000fa558,
	/* Control Plane w/NULL enc. + ZUC int. DL */
	0x000fa558,
	/* Control Plane w/SNOW f8 enc. + NULL int. UL */
	0x000fa558,
	/* Control Plane w/SNOW f8 enc. + NULL int. DL */
	0x000fa558,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. UL */
	0x000fa558,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. DL */
	0x000fa558,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. UL */
	0x000fa558,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. DL */
	0x000fa558,
	/* Control Plane w/SNOW f8 enc. + ZUC int. UL */
	0x000fa558,
	/* Control Plane w/SNOW f8 enc. + ZUC int. DL */
	0x000fa558,
	/* Control Plane w/AES CTR enc. + NULL int. UL */
	0x000fa558,
	/* Control Plane w/AES CTR enc. + NULL int. DL */
	0x000fa558,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. UL */
	0x000fa558,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. DL */
	0x000fa558,
	/* Control Plane w/AES CTR enc. + AES CMAC int. UL */
	0x000fa558,
	/* Control Plane w/AES CTR enc. + AES CMAC int. DL */
	0x000fa558,
	/* Control Plane w/AES CTR enc. + ZUC int. UL */
	0x000fa558,
	/* Control Plane w/AES CTR enc. + ZUC int. DL */
	0x000fa558,
	/* Control Plane w/ZUC enc. + NULL int. UL */
	0x000fa558,
	/* Control Plane w/ZUC enc. + NULL int. DL */
	0x000fa558,
	/* Control Plane w/ZUC enc. + SNOW f9 int. UL */
	0x000fa558,
	/* Control Plane w/ZUC enc. + SNOW f9 int. DL */
	0x000fa558,
	/* Control Plane w/ZUC enc. + AES CMAC int. UL */
	0x000fa558,
	/* Control Plane w/ZUC enc. + AES CMAC int. DL */
	0x000fa558,
	/* Control Plane w/ZUC enc. + ZUC int. UL */
	0x000fa558,
	/* Control Plane w/ZUC enc. + ZUC int. DL */
	0x000fa558,
	/* User Plane w/NULL enc. UL LONG SN */
	0x000fa558,
	/* User Plane w/NULL enc. DL LONG SN */
	0x000fa558,
	/* User Plane w/NULL enc. UL SHORT SN */
	0x000fa558,
	/* User Plane w/NULL enc. DL SHORT SN */
	0x000fa558,
	/* User Plane w/NULL enc. UL 15 BIT SN */
	0x000fa558,
	/* User Plane w/NULL enc. DL 15 BIT SN */
	0x000fa558,
	/* User Plane w/SNOW f8 enc. UL LONG SN */
	0x000fa558,
	/* User Plane w/SNOW f8 enc. DL LONG SN */
	0x000fa558,
	/* User Plane w/SNOW f8 enc. UL SHORT SN */
	0x000fa558,
	/* User Plane w/SNOW f8 enc. DL SHORT SN */
	0x000fa558,
	/* User Plane w/SNOW f8 enc. UL 15 BIT SN */
	0x000fa558,
	/* User Plane w/SNOW f8 enc. DL 15 BIT SN */
	0x000fa558,
	/* User Plane w/AES CTR enc. UL LONG SN */
	0x000fa558,
	/* User Plane w/AES CTR enc. DL LONG SN */
	0x000fa558,
	/* User Plane w/AES CTR enc. UL SHORT SN */
	0x000fa558,
	/* User Plane w/AES CTR enc. DL SHORT SN */
	0x000fa558,
	/* User Plane w/AES CTR enc. UL 15 BIT SN */
	0x000fa558,
	/* User Plane w/AES CTR enc. DL 15 BIT SN */
	0x000fa558,
	/* User Plane w/ZUC enc. UL LONG SN */
	0x000fa558,
	/* User Plane w/ZUC enc. DL LONG SN */
	0x000fa558,
	/* User Plane w/ZUC enc. UL SHORT SN */
	0x000fa558,
	/* User Plane w/ZUC enc. DL SHORT SN */
	0x000fa558,
	/* User Plane w/ZUC enc. UL 15 BIT SN */
	0x000fa558,
	/* User Plane w/ZUC enc. DL 15 BIT SN */
	0x000fa558,
	/* Short-MAC w/NULL int. */
	0x00000000,
	/* Short-MAC w/SNOW f9 int. */
	0x00000000,
	/* Short-MAC w/AES CMAC int. */
	0x00000000,
	/* Short-MAC w/ZUC int. */
	0x00000000,
};

static uint8_t pdcp_test_bearer[] = {
	/* Control Plane w/NULL enc. + NULL int. UL */
	0x03,
	/* Control Plane w/NULL enc. + NULL int. DL */
	0x03,
	/* Control Plane w/NULL enc. + SNOW f9 int. UL */
	0x03,
	/* Control Plane w/NULL enc. + SNOW f9 int. DL */
	0x03,
	/* Control Plane w/NULL enc. + AES CMAC int. UL */
	0x03,
	/* Control Plane w/NULL enc. + AES CMAC int. DL */
	0x03,
	/* Control Plane w/NULL enc. + ZUC int. UL */
	0x03,
	/* Control Plane w/NULL enc. + ZUC int. DL */
	0x03,
	/* Control Plane w/SNOW f8 enc. + NULL int. UL */
	0x03,
	/* Control Plane w/SNOW f8 enc. + NULL int. DL */
	0x03,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. UL */
	0x03,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. DL */
	0x03,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. UL */
	0x03,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. DL */
	0x03,
	/* Control Plane w/SNOW f8 enc. + ZUC int. UL */
	0x03,
	/* Control Plane w/SNOW f8 enc. + ZUC int. DL */
	0x03,
	/* Control Plane w/AES CTR enc. + NULL int. UL */
	0x03,
	/* Control Plane w/AES CTR enc. + NULL int. DL */
	0x03,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. UL */
	0x03,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. DL */
	0x03,
	/* Control Plane w/AES CTR enc. + AES CMAC int. UL */
	0x03,
	/* Control Plane w/AES CTR enc. + AES CMAC int. DL */
	0x03,
	/* Control Plane w/AES CTR enc. + ZUC int. UL */
	0x03,
	/* Control Plane w/AES CTR enc. + ZUC int. DL */
	0x03,
	/* Control Plane w/ZUC enc. + NULL int. UL */
	0x03,
	/* Control Plane w/ZUC enc. + NULL int. DL */
	0x03,
	/* Control Plane w/ZUC enc. + SNOW f9 int. UL */
	0x03,
	/* Control Plane w/ZUC enc. + SNOW f9 int. DL */
	0x03,
	/* Control Plane w/ZUC enc. + AES CMAC int. UL */
	0x03,
	/* Control Plane w/ZUC enc. + AES CMAC int. DL */
	0x03,
	/* Control Plane w/ZUC enc. + ZUC int. UL */
	0x03,
	/* Control Plane w/ZUC enc. + ZUC int. DL */
	0x03,
	/* User Plane w/NULL enc. UL LONG SN */
	0x03,
	/* User Plane w/NULL enc. DL LONG SN */
	0x03,
	/* User Plane w/NULL enc. UL SHORT SN */
	0x03,
	/* User Plane w/NULL enc. DL SHORT SN */
	0x03,
	/* User Plane w/NULL enc. UL 15 BIT SN */
	0x03,
	/* User Plane w/NULL enc. DL 15 BIT SN */
	0x03,
	/* User Plane w/SNOW f8 enc. UL LONG SN */
	0x03,
	/* User Plane w/SNOW f8 enc. DL LONG SN */
	0x03,
	/* User Plane w/SNOW f8 enc. UL SHORT SN */
	0x03,
	/* User Plane w/SNOW f8 enc. DL SHORT SN */
	0x03,
	/* User Plane w/SNOW f8 enc. UL 15 BIT SN */
	0x03,
	/* User Plane w/SNOW f8 enc. DL 15 BIT SN */
	0x03,
	/* User Plane w/AES CTR enc. UL LONG SN */
	0x03,
	/* User Plane w/AES CTR enc. DL LONG SN */
	0x03,
	/* User Plane w/AES CTR enc. UL SHORT SN */
	0x03,
	/* User Plane w/AES CTR enc. DL SHORT SN */
	0x03,
	/* User Plane w/AES CTR enc. UL 15 BIT SN */
	0x03,
	/* User Plane w/AES CTR enc. DL 15 BIT SN */
	0x03,
	/* User Plane w/ZUC enc. UL LONG SN */
	0x03,
	/* User Plane w/ZUC enc. DL LONG SN */
	0x03,
	/* User Plane w/ZUC enc. UL SHORT SN */
	0x03,
	/* User Plane w/ZUC enc. DL SHORT SN */
	0x03,
	/* User Plane w/ZUC enc. UL 15 BIT SN */
	0x03,
	/* User Plane w/ZUC enc. DL 15 BIT SN */
	0x03,
	/* Short-MAC w/NULL int. */
	0x00,
	/* Short-MAC w/SNOW f9 int. */
	0x00,
	/* Short-MAC w/AES CMAC int. */
	0x00,
	/* Short-MAC w/ZUC int. */
	0x00,
};

static uint8_t pdcp_test_packet_direction[] = {
	/* Control Plane w/NULL enc. + NULL int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/NULL enc. + NULL int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/NULL enc. + SNOW f9 int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/NULL enc. + SNOW f9 int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/NULL enc. + AES CMAC int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/NULL enc. + AES CMAC int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/NULL enc. + ZUC int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/NULL enc. + ZUC int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/SNOW f8 enc. + NULL int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/SNOW f8 enc. + NULL int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/SNOW f8 enc. + ZUC int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/SNOW f8 enc. + ZUC int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/AES CTR enc. + NULL int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/AES CTR enc. + NULL int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/AES CTR enc. + AES CMAC int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/AES CTR enc. + AES CMAC int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/AES CTR enc. + ZUC int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/AES CTR enc. + ZUC int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/ZUC enc. + NULL int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/ZUC enc. + NULL int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/ZUC enc. + SNOW f9 int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/ZUC enc. + SNOW f9 int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/ZUC enc. + AES CMAC int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/ZUC enc. + AES CMAC int. DL */
	PDCP_DIR_DOWNLINK,
	/* Control Plane w/ZUC enc. + ZUC int. UL */
	PDCP_DIR_UPLINK,
	/* Control Plane w/ZUC enc. + ZUC int. DL */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/NULL enc. UL LONG SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/NULL enc. DL LONG SN */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/NULL enc. UL SHORT SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/NULL enc. DL SHORT SN */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/NULL enc. UL 15 BIT SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/NULL enc. DL 15 BIT SN */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/SNOW f8 enc. UL LONG SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/SNOW f8 enc. DL LONG SN */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/SNOW f8 enc. UL SHORT SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/SNOW f8 enc. DL SHORT SN */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/SNOW f8 enc. UL 15 BIT SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/SNOW f8 enc. DL 15 BIT SN */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/AES CTR enc. UL LONG SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/AES CTR enc. DL LONG SN */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/AES CTR enc. UL SHORT SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/AES CTR enc. DL SHORT SN */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/AES CTR enc. UL 15 BIT SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/AES CTR enc. DL 15 BIT SN */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/ZUC enc. UL LONG SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/ZUC enc. DL LONG SN */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/ZUC enc. UL SHORT SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/ZUC enc. DL SHORT SN */
	PDCP_DIR_DOWNLINK,
	/* User Plane w/ZUC enc. UL 15 BIT SN */
	PDCP_DIR_UPLINK,
	/* User Plane w/ZUC enc. DL 15 BIT SN */
	PDCP_DIR_DOWNLINK,
};

static enum pdcp_sn_size pdcp_test_data_sn_size[] = {
	/* Control Plane w/NULL enc. + NULL int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/NULL enc. + NULL int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/NULL enc. + SNOW f9 int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/NULL enc. + SNOW f9 int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/NULL enc. + AES CMAC int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/NULL enc. + AES CMAC int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/NULL enc. + ZUC int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/NULL enc. + ZUC int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/SNOW f8 enc. + NULL int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/SNOW f8 enc. + NULL int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/SNOW f8 enc. + ZUC int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/SNOW f8 enc. + ZUC int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/AES CTR enc. + NULL int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/AES CTR enc. + NULL int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/AES CTR enc. + AES CMAC int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/AES CTR enc. + AES CMAC int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/AES CTR enc. + ZUC int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/AES CTR enc. + ZUC int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/ZUC enc. + NULL int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/ZUC enc. + NULL int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/ZUC enc. + SNOW f9 int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/ZUC enc. + SNOW f9 int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/ZUC enc. + AES CMAC int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/ZUC enc. + AES CMAC int. DL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/ZUC enc. + ZUC int. UL */
	PDCP_SN_SIZE_5,
	/* Control Plane w/ZUC enc. + ZUC int. DL */
	PDCP_SN_SIZE_5,
	/* User Plane w/NULL enc. UL LONG SN */
	PDCP_SN_SIZE_12,
	/* User Plane w/NULL enc. DL LONG SN */
	PDCP_SN_SIZE_12,
	/* User Plane w/NULL enc. UL SHORT SN */
	PDCP_SN_SIZE_7,
	/* User Plane w/NULL enc. DL SHORT SN */
	PDCP_SN_SIZE_7,
	/* User Plane w/NULL enc. UL 15 BIT SN */
	PDCP_SN_SIZE_15,
	/* User Plane w/NULL enc. DL 15 BIT SN */
	PDCP_SN_SIZE_15,
	/* User Plane w/SNOW f8 enc. UL LONG SN */
	PDCP_SN_SIZE_12,
	/* User Plane w/SNOW f8 enc. DL LONG SN */
	PDCP_SN_SIZE_12,
	/* User Plane w/SNOW f8 enc. UL SHORT SN */
	PDCP_SN_SIZE_7,
	/* User Plane w/SNOW f8 enc. DL SHORT SN */
	PDCP_SN_SIZE_7,
	/* User Plane w/SNOW f8 enc. UL 15 BIT SN */
	PDCP_SN_SIZE_15,
	/* User Plane w/SNOW f8 enc. DL 15 BIT SN */
	PDCP_SN_SIZE_15,
	/* User Plane w/AES CTR enc. UL LONG SN */
	PDCP_SN_SIZE_12,
	/* User Plane w/AES CTR enc. DL LONG SN */
	PDCP_SN_SIZE_12,
	/* User Plane w/AES CTR enc. UL SHORT SN */
	PDCP_SN_SIZE_7,
	/* User Plane w/AES CTR enc. DL SHORT SN */
	PDCP_SN_SIZE_7,
	/* User Plane w/AES CTR enc. UL 15 BIT SN */
	PDCP_SN_SIZE_15,
	/* User Plane w/AES CTR enc. DL 15 BIT SN */
	PDCP_SN_SIZE_15,
	/* User Plane w/ZUC enc. UL LONG SN */
	PDCP_SN_SIZE_12,
	/* User Plane w/ZUC enc. DL LONG SN */
	PDCP_SN_SIZE_12,
	/* User Plane w/ZUC enc. UL SHORT SN */
	PDCP_SN_SIZE_7,
	/* User Plane w/ZUC enc. DL SHORT SN */
	PDCP_SN_SIZE_7,
	/* User Plane w/ZUC enc. UL 15 BIT SN */
	PDCP_SN_SIZE_15,
	/* User Plane w/ZUC enc. DL 15 BIT SN */
	PDCP_SN_SIZE_15,
	/* Short-MAC w/NULL int. */
	PDCP_SN_SIZE_5,
	/* Short-MAC w/SNOW f9 int. */
	PDCP_SN_SIZE_5,
	/* Short-MAC w/AES CMAC int. */
	PDCP_SN_SIZE_5,
	/* Short-MAC w/ZUC int. */
	PDCP_SN_SIZE_5,
};

static uint8_t *pdcp_test_crypto_key[] = {
	/* Control Plane w/NULL enc. + NULL int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/NULL enc. + NULL int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/NULL enc. + SNOW f9 int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/NULL enc. + SNOW f9 int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/NULL enc. + AES CMAC int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/NULL enc. + AES CMAC int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/NULL enc. + ZUC int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/NULL enc. + ZUC int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/SNOW f8 enc. + NULL int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/SNOW f8 enc. + NULL int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/SNOW f8 enc. + ZUC int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/SNOW f8 enc. + ZUC int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/AES CTR enc. + NULL int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/AES CTR enc. + NULL int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/AES CTR enc. + SNOW f9 int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/AES CTR enc. + SNOW f9 int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/AES CTR enc. + AES CMAC int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/AES CTR enc. + AES CMAC int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/AES CTR enc. + ZUC int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/AES CTR enc. + ZUC int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/ZUC enc. + NULL int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/ZUC enc. + NULL int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/ZUC enc. + SNOW f9 int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/ZUC enc. + SNOW f9 int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/ZUC enc. + AES CMAC int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/ZUC enc. + AES CMAC int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/ZUC enc. + ZUC int. UL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Control Plane w/ZUC enc. + ZUC int. DL */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/NULL enc. UL LONG SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/NULL enc. DL LONG SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/NULL enc. UL SHORT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/NULL enc. DL SHORT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/NULL enc. UL 15 BIT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/NULL enc. DL 15 BIT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/SNOW f8 enc. UL LONG SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/SNOW f8 enc. DL LONG SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/SNOW f8 enc. UL SHORT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/SNOW f8 enc. DL SHORT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/SNOW f8 enc. UL 15 BIT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/SNOW f8 enc. DL 15 BIT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/AES CTR enc. UL LONG SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/AES CTR enc. DL LONG SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/AES CTR enc. UL SHORT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/AES CTR enc. DL SHORT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/AES CTR enc. UL 15 BIT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/AES CTR enc. DL 15 BIT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/ZUC enc. UL LONG SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/ZUC enc. DL LONG SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/ZUC enc. UL SHORT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/ZUC enc. DL SHORT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/ZUC enc. UL 15 BIT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* User Plane w/ZUC enc. DL 15 BIT SN */
	(uint8_t[]){0x5a, 0xcb, 0x1d, 0x64, 0x4c, 0x0d, 0x51, 0x20, 0x4e, 0xa5,
		    0xf1, 0x45, 0x10, 0x10, 0xd8, 0x52},
	/* Short-MAC w/NULL int. */
	NULL,
	/* Short-MAC w/SNOW f9 int. */
	NULL,
	/* Short-MAC w/AES CMAC int. */
	NULL,
	/* Short-MAC w/ZUC int. */
	NULL,
};

static uint8_t *pdcp_test_auth_key[] = {
	/* Control Plane w/NULL enc. + NULL int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/NULL enc. + NULL int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/NULL enc. + SNOW f9 int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/NULL enc. + SNOW f9 int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/NULL enc. + AES CMAC int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/NULL enc. + AES CMAC int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/NULL enc. + ZUC int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/NULL enc. + ZUC int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/SNOW f8 enc. + NULL int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/SNOW f8 enc. + NULL int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/SNOW f8 enc. + ZUC int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/SNOW f8 enc. + ZUC int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/AES CTR enc. + NULL int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/AES CTR enc. + NULL int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/AES CTR enc. + SNOW f9 int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/AES CTR enc. + SNOW f9 int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/AES CTR enc. + AES CMAC int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/AES CTR enc. + AES CMAC int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/AES CTR enc. + ZUC int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/AES CTR enc. + ZUC int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/ZUC enc. + NULL int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/ZUC enc. + NULL int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/ZUC enc. + SNOW f9 int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/ZUC enc. + SNOW f9 int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/ZUC enc. + AES CMAC int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/ZUC enc. + AES CMAC int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/ZUC enc. + ZUC int. UL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Control Plane w/ZUC enc. + ZUC int. DL */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* User Plane w/NULL enc. UL LONG SN */
	NULL,
	/* User Plane w/NULL enc. DL LONG SN */
	NULL,
	/* User Plane w/NULL enc. UL SHORT SN */
	NULL,
	/* User Plane w/NULL enc. DL SHORT SN */
	NULL,
	/* User Plane w/NULL enc. UL 15 BIT SN */
	NULL,
	/* User Plane w/NULL enc. DL 15 BIT SN */
	NULL,
	/* User Plane w/SNOW f8 enc. UL LONG SN */
	NULL,
	/* User Plane w/SNOW f8 enc. DL LONG SN */
	NULL,
	/* User Plane w/SNOW f8 enc. UL SHORT SN */
	NULL,
	/* User Plane w/SNOW f8 enc. DL SHORT SN */
	NULL,
	/* User Plane w/SNOW f8 enc. UL 15 BIT SN */
	NULL,
	/* User Plane w/SNOW f8 enc. DL 15 BIT SN */
	NULL,
	/* User Plane w/AES CTR enc. UL LONG SN */
	NULL,
	/* User Plane w/AES CTR enc. DL LONG SN */
	NULL,
	/* User Plane w/AES CTR enc. UL SHORT SN */
	NULL,
	/* User Plane w/AES CTR enc. DL SHORT SN */
	NULL,
	/* User Plane w/AES CTR enc. UL 15 BIT SN */
	NULL,
	/* User Plane w/AES CTR enc. DL 15 BIT SN */
	NULL,
	/* User Plane w/ZUC enc. UL LONG SN */
	NULL,
	/* User Plane w/ZUC enc. DL LONG SN */
	NULL,
	/* User Plane w/ZUC enc. UL SHORT SN */
	NULL,
	/* User Plane w/ZUC enc. DL SHORT SN */
	NULL,
	/* User Plane w/ZUC enc. UL 15 BIT SN */
	NULL,
	/* User Plane w/ZUC enc. DL 15 BIT SN */
	NULL,
	/* Short-MAC w/NULL int. */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Short-MAC w/SNOW f9 int. */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Short-MAC w/AES CMAC int. */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
	/* Short-MAC w/ZUC int. */
	(uint8_t[]){0xc7, 0x36, 0xc6, 0xaa, 0xb2, 0x2b, 0xff, 0xf9, 0x1e, 0x26,
		    0x98, 0xd2, 0xe2, 0x2a, 0xd5, 0x7e},
};

static uint8_t *pdcp_test_data_in[] = {
	/* Control Plane w/NULL enc. + NULL int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/NULL enc. + NULL int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/NULL enc. + SNOW f9 int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/NULL enc. + SNOW f9 int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/NULL enc. + AES CMAC int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/NULL enc. + AES CMAC int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/NULL enc. + ZUC int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/NULL enc. + ZUC int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/SNOW f8 enc. + NULL int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/SNOW f8 enc. + NULL int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/SNOW f8 enc. + ZUC int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/SNOW f8 enc. + ZUC int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/AES CTR enc. + NULL int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/AES CTR enc. + NULL int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/AES CTR enc. + SNOW f9 int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/AES CTR enc. + SNOW f9 int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/AES CTR enc. + AES CMAC int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/AES CTR enc. + AES CMAC int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/AES CTR enc. + ZUC int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/AES CTR enc. + ZUC int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/ZUC enc. + NULL int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/ZUC enc. + NULL int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/ZUC enc. + SNOW f9 int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/ZUC enc. + SNOW f9 int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/ZUC enc. + AES CMAC int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/ZUC enc. + AES CMAC int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/ZUC enc. + ZUC int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Control Plane w/ZUC enc. + ZUC int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/NULL enc. UL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/NULL enc. DL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/NULL enc. UL SHORT SN */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/NULL enc. DL SHORT SN */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/NULL enc. UL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/NULL enc. DL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/SNOW f8 enc. UL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/SNOW f8 enc. DL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/SNOW f8 enc. UL SHORT SN */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/SNOW f8 enc. DL SHORT SN */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/SNOW f8 enc. UL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/SNOW f8 enc. DL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/AES CTR enc. UL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/AES CTR enc. DL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/AES CTR enc. UL SHORT SN */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/AES CTR enc. DL SHORT SN */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/AES CTR enc. UL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/AES CTR enc. DL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/ZUC enc. UL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/ZUC enc. DL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/ZUC enc. UL SHORT SN */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/ZUC enc. DL SHORT SN */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/ZUC enc. UL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/ZUC enc. DL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Short-MAC w/NULL int. */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Short-MAC w/SNOW f9 int. */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Short-MAC w/AES CMAC int. */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* Short-MAC w/ZUC int. */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
};

static uint32_t pdcp_test_data_in_len[] = {
	/* Control Plane w/NULL enc. + NULL int. UL */
	16,
	/* Control Plane w/NULL enc. + NULL int. DL */
	16,
	/* Control Plane w/NULL enc. + SNOW f9 int. UL */
	16,
	/* Control Plane w/NULL enc. + SNOW f9 int. DL */
	16,
	/* Control Plane w/NULL enc. + AES CMAC int. UL */
	16,
	/* Control Plane w/NULL enc. + AES CMAC int. DL */
	16,
	/* Control Plane w/NULL enc. + ZUC int. UL */
	16,
	/* Control Plane w/NULL enc. + ZUC int. DL */
	16,
	/* Control Plane w/SNOW f8 enc. + NULL int. UL */
	16,
	/* Control Plane w/SNOW f8 enc. + NULL int. DL */
	16,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. UL */
	16,
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. DL */
	16,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. UL */
	16,
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. DL */
	16,
	/* Control Plane w/SNOW f8 enc. + ZUC int. UL */
	16,
	/* Control Plane w/SNOW f8 enc. + ZUC int. DL */
	16,
	/* Control Plane w/AES CTR enc. + NULL int. UL */
	16,
	/* Control Plane w/AES CTR enc. + NULL int. DL */
	16,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. UL */
	16,
	/* Control Plane w/AES CTR enc. + SNOW f9 int. DL */
	16,
	/* Control Plane w/AES CTR enc. + AES CMAC int. UL */
	16,
	/* Control Plane w/AES CTR enc. + AES CMAC int. DL */
	16,
	/* Control Plane w/AES CTR enc. + ZUC int. UL */
	16,
	/* Control Plane w/AES CTR enc. + ZUC int. DL */
	16,
	/* Control Plane w/ZUC enc. + NULL int. UL */
	16,
	/* Control Plane w/ZUC enc. + NULL int. DL */
	16,
	/* Control Plane w/ZUC enc. + SNOW f9 int. UL */
	16,
	/* Control Plane w/ZUC enc. + SNOW f9 int. DL */
	16,
	/* Control Plane w/ZUC enc. + AES CMAC int. UL */
	16,
	/* Control Plane w/ZUC enc. + AES CMAC int. DL */
	16,
	/* Control Plane w/ZUC enc. + ZUC int. UL */
	16,
	/* Control Plane w/ZUC enc. + ZUC int. DL */
	16,
	/* User Plane w/NULL enc. UL LONG SN */
	17,
	/* User Plane w/NULL enc. DL LONG SN */
	17,
	/* User Plane w/NULL enc. UL SHORT SN */
	16,
	/* User Plane w/NULL enc. DL SHORT SN */
	16,
	/* User Plane w/NULL enc. UL 15 BIT SN */
	17,
	/* User Plane w/NULL enc. DL 15 BIT SN */
	17,
	/* User Plane w/SNOW f8 enc. UL LONG SN */
	17,
	/* User Plane w/SNOW f8 enc. DL LONG SN */
	17,
	/* User Plane w/SNOW f8 enc. UL SHORT SN */
	16,
	/* User Plane w/SNOW f8 enc. DL SHORT SN */
	16,
	/* User Plane w/SNOW f8 enc. UL 15 BIT SN */
	17,
	/* User Plane w/SNOW f8 enc. DL 15 BIT SN */
	17,
	/* User Plane w/AES CTR enc. UL LONG SN */
	17,
	/* User Plane w/AES CTR enc. DL LONG SN */
	17,
	/* User Plane w/AES CTR enc. UL SHORT SN */
	16,
	/* User Plane w/AES CTR enc. DL SHORT SN */
	16,
	/* User Plane w/AES CTR enc. UL 15 BIT SN */
	17,
	/* User Plane w/AES CTR enc. DL 15 BIT SN */
	17,
	/* User Plane w/ZUC enc. UL LONG SN */
	17,
	/* User Plane w/ZUC enc. DL LONG SN */
	17,
	/* User Plane w/ZUC enc. UL SHORT SN */
	16,
	/* User Plane w/ZUC enc. DL SHORT SN */
	16,
	/* User Plane w/ZUC enc. UL 15 BIT SN */
	17,
	/* User Plane w/ZUC enc. DL 15 BIT SN */
	17,
	/* Short-MAC w/NULL int. */
	16,
	/* Short-MAC w/SNOW f9 int. */
	16,
	/* Short-MAC w/AES CMAC int. */
	16,
	/* Short-MAC w/ZUC int. */
	16,
};

static uint8_t *pdcp_test_data_out[] = {
	/* Control Plane w/NULL enc. + NULL int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0x00, 0x00, 0x00, 0x00},
	/* Control Plane w/NULL enc. + NULL int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0x00, 0x00, 0x00, 0x00},
	/* Control Plane w/NULL enc. + SNOW f9 int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0x88, 0x7f, 0x4e, 0x59},
	/* Control Plane w/NULL enc. + SNOW f9 int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0x9d, 0x9e, 0x45, 0x36},
	/* Control Plane w/NULL enc. + AES CMAC int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0xf3, 0xdd, 0x01, 0xdf},
	/* Control Plane w/NULL enc. + AES CMAC int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0x5d, 0x8e, 0x5d, 0x05},
	/* Control Plane w/NULL enc. + ZUC int. UL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0x18, 0xc3, 0x2e, 0x66},
	/* Control Plane w/NULL enc. + ZUC int. DL */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0x72, 0x44, 0xab, 0x64},
	/* Control Plane w/SNOW f8 enc. + NULL int. UL */
	(uint8_t[]){0x8b, 0x39, 0xd1, 0x2b, 0xbd, 0x2a, 0x4c, 0x91, 0x59, 0xff,
		    0xfa, 0xce, 0x68, 0xc0, 0x7c, 0x30, 0xd0, 0xc5, 0x08, 0x58},
	/* Control Plane w/SNOW f8 enc. + NULL int. DL */
	(uint8_t[]){0x8b, 0x26, 0xf3, 0x67, 0xf1, 0x42, 0x50, 0x1a, 0x85, 0x02,
		    0xb9, 0x00, 0xa8, 0x9b, 0xcf, 0x06, 0xd1, 0x2c, 0x86, 0x7c},
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. UL */
	(uint8_t[]){0x8b, 0x39, 0xd1, 0x2b, 0xbd, 0x2a, 0x4c, 0x91, 0x59, 0xff,
		    0xfa, 0xce, 0x68, 0xc0, 0x7c, 0x30, 0x58, 0xba, 0x46, 0x01},
	/* Control Plane w/SNOW f8 enc. + SNOW f9 int. DL */
	(uint8_t[]){0x8b, 0x26, 0xf3, 0x67, 0xf1, 0x42, 0x50, 0x1a, 0x85, 0x02,
		    0xb9, 0x00, 0xa8, 0x9b, 0xcf, 0x06, 0x4c, 0xb2, 0xc3, 0x4a},
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. UL */
	(uint8_t[]){0x8b, 0x39, 0xd1, 0x2b, 0xbd, 0x2a, 0x4c, 0x91, 0x59, 0xff,
		    0xfa, 0xce, 0x68, 0xc0, 0x7c, 0x30, 0x23, 0x18, 0x09, 0x87},
	/* Control Plane w/SNOW f8 enc. + AES CMAC int. DL */
	(uint8_t[]){0x8b, 0x26, 0xf3, 0x67, 0xf1, 0x42, 0x50, 0x1a, 0x85, 0x02,
		    0xb9, 0x00, 0xa8, 0x9b, 0xcf, 0x06, 0x8c, 0xa2, 0xdb, 0x79},
	/* Control Plane w/SNOW f8 enc. + ZUC int. UL */
	(uint8_t[]){0x8b, 0x39, 0xd1, 0x2b, 0xbd, 0x2a, 0x4c, 0x91, 0x59, 0xff,
		    0xfa, 0xce, 0x68, 0xc0, 0x7c, 0x30, 0xc8, 0x06, 0x26, 0x3e},
	/* Control Plane w/SNOW f8 enc. + ZUC int. DL */
	(uint8_t[]){0x8b, 0x26, 0xf3, 0x67, 0xf1, 0x42, 0x50, 0x1a, 0x85, 0x02,
		    0xb9, 0x00, 0xa8, 0x9b, 0xcf, 0x06, 0xa3, 0x68, 0x2d, 0x18},
	/* Control Plane w/AES CTR enc. + NULL int. UL */
	(uint8_t[]){0x8b, 0x2c, 0x59, 0x74, 0xab, 0xdc, 0xd8, 0x36, 0xf6, 0x1b,
		    0x54, 0x8d, 0x46, 0x93, 0x1c, 0xff, 0x32, 0x4f, 0x1a, 0x6b},
	/* Control Plane w/AES CTR enc. + NULL int. DL */
	(uint8_t[]){0x8b, 0xf2, 0xb9, 0x9d, 0x96, 0x51, 0xcc, 0x1e, 0xe8, 0x55,
		    0x3e, 0x98, 0xc5, 0x58, 0xec, 0x4c, 0x92, 0x40, 0x52, 0x8e},
	/* Control Plane w/AES CTR enc. + SNOW f9 int. UL */
	(uint8_t[]){0x8b, 0x2c, 0x59, 0x74, 0xab, 0xdc, 0xd8, 0x36, 0xf6, 0x1b,
		    0x54, 0x8d, 0x46, 0x93, 0x1c, 0xff, 0xba, 0x30, 0x54, 0x32},
	/* Control Plane w/AES CTR enc. + SNOW f9 int. DL */
	(uint8_t[]){0x8b, 0xf2, 0xb9, 0x9d, 0x96, 0x51, 0xcc, 0x1e, 0xe8, 0x55,
		    0x3e, 0x98, 0xc5, 0x58, 0xec, 0x4c, 0x0f, 0xde, 0x17, 0xb8},
	/* Control Plane w/AES CTR enc. + AES CMAC int. UL */
	(uint8_t[]){0x8b, 0x2c, 0x59, 0x74, 0xab, 0xdc, 0xd8, 0x36, 0xf6, 0x1b,
		    0x54, 0x8d, 0x46, 0x93, 0x1c, 0xff, 0xc1, 0x92, 0x1b, 0xb4},
	/* Control Plane w/AES CTR enc. + AES CMAC int. DL */
	(uint8_t[]){0x8b, 0xf2, 0xb9, 0x9d, 0x96, 0x51, 0xcc, 0x1e, 0xe8, 0x55,
		    0x3e, 0x98, 0xc5, 0x58, 0xec, 0x4c, 0xcf, 0xce, 0x0f, 0x8b},
	/* Control Plane w/AES CTR enc. + ZUC int. UL */
	(uint8_t[]){0x8b, 0x2c, 0x59, 0x74, 0xab, 0xdc, 0xd8, 0x36, 0xf6, 0x1b,
		    0x54, 0x8d, 0x46, 0x93, 0x1c, 0xff, 0x2a, 0x8c, 0x34, 0x0d},
	/* Control Plane w/AES CTR enc. + ZUC int. DL */
	(uint8_t[]){0x8b, 0xf2, 0xb9, 0x9d, 0x96, 0x51, 0xcc, 0x1e, 0xe8, 0x55,
		    0x3e, 0x98, 0xc5, 0x58, 0xec, 0x4c, 0xe0, 0x04, 0xf9, 0xea},
	/* Control Plane w/ZUC enc. + NULL int. UL */
	(uint8_t[]){0x8b, 0xa6, 0x23, 0xf8, 0xca, 0x98, 0x03, 0x33, 0x81, 0x8a,
		    0x6b, 0xfe, 0x37, 0xf2, 0x20, 0xd6, 0x68, 0x82, 0xb9, 0x06},
	/* Control Plane w/ZUC enc. + NULL int. DL */
	(uint8_t[]){0x8b, 0x3b, 0x42, 0xfc, 0x73, 0x83, 0x09, 0xb1, 0x3f, 0x66,
		    0x86, 0x3a, 0x5d, 0xe7, 0x47, 0xf4, 0x44, 0x81, 0x49, 0x0e},
	/* Control Plane w/ZUC enc. + SNOW f9 int. UL */
	(uint8_t[]){0x8b, 0xa6, 0x23, 0xf8, 0xca, 0x98, 0x03, 0x33, 0x81, 0x8a,
		    0x6b, 0xfe, 0x37, 0xf2, 0x20, 0xd6, 0xe0, 0xfd, 0xf7, 0x5f},
	/* Control Plane w/ZUC enc. + SNOW f9 int. DL */
	(uint8_t[]){0x8b, 0x3b, 0x42, 0xfc, 0x73, 0x83, 0x09, 0xb1, 0x3f, 0x66,
		    0x86, 0x3a, 0x5d, 0xe7, 0x47, 0xf4, 0xd9, 0x1f, 0x0c, 0x38},
	/* Control Plane w/ZUC enc. + AES CMAC int. UL */
	(uint8_t[]){0x8b, 0xa6, 0x23, 0xf8, 0xca, 0x98, 0x03, 0x33, 0x81, 0x8a,
		    0x6b, 0xfe, 0x37, 0xf2, 0x20, 0xd6, 0x9b, 0x5f, 0xb8, 0xd9},
	/* Control Plane w/ZUC enc. + AES CMAC int. DL */
	(uint8_t[]){0x8b, 0x3b, 0x42, 0xfc, 0x73, 0x83, 0x09, 0xb1, 0x3f, 0x66,
		    0x86, 0x3a, 0x5d, 0xe7, 0x47, 0xf4, 0x19, 0x0f, 0x14, 0x0b},
	/* Control Plane w/ZUC enc. + ZUC int. UL */
	(uint8_t[]){0x8b, 0xa6, 0x23, 0xf8, 0xca, 0x98, 0x03, 0x33, 0x81, 0x8a,
		    0x6b, 0xfe, 0x37, 0xf2, 0x20, 0xd6, 0x70, 0x41, 0x97, 0x60},
	/* Control Plane w/ZUC enc. + ZUC int. DL */
	(uint8_t[]){0x8b, 0x3b, 0x42, 0xfc, 0x73, 0x83, 0x09, 0xb1, 0x3f, 0x66,
		    0x86, 0x3a, 0x5d, 0xe7, 0x47, 0xf4, 0x36, 0xc5, 0xe2, 0x6a},
	/* User Plane w/NULL enc. UL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/NULL enc. DL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/NULL enc. UL SHORT SN */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/NULL enc. DL SHORT SN */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/NULL enc. UL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/NULL enc. DL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4,
		    0x57, 0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8},
	/* User Plane w/SNOW f8 enc. UL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0x7a, 0xe0, 0x00, 0x07, 0x2a, 0xa6, 0xef, 0xdc,
		    0x75, 0xef, 0x2e, 0x27, 0x0f, 0x69, 0x3d},
	/* User Plane w/SNOW f8 enc. DL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0x7e, 0xbb, 0x80, 0x20, 0xba, 0xef, 0xe7, 0xf7,
		    0xef, 0x69, 0x51, 0x85, 0x09, 0xa5, 0xab},
	/* User Plane w/SNOW f8 enc. UL SHORT SN */
	(uint8_t[]){0x8b, 0x80, 0xcf, 0xe5, 0x27, 0xe2, 0x88, 0x2a, 0xac, 0xc5,
		    0xaf, 0x49, 0x9b, 0x3e, 0x48, 0x89},
	/* User Plane w/SNOW f8 enc. DL SHORT SN */
	(uint8_t[]){0x8b, 0xe2, 0x51, 0x58, 0x88, 0xff, 0x1a, 0x00, 0xe4, 0x67,
		    0x05, 0x46, 0x24, 0x2f, 0x07, 0xb7},
	/* User Plane w/SNOW f8 enc. UL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xbe, 0x72, 0x05, 0x78, 0x92, 0xec, 0xb1, 0x4f,
		    0xdd, 0x5d, 0xfc, 0x60, 0x2c, 0x9a, 0x85},
	/* User Plane w/SNOW f8 enc. DL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0x0b, 0x50, 0xf3, 0xff, 0x37, 0xe3, 0x6b, 0xaf,
		    0x08, 0xd8, 0xf6, 0x1f, 0xca, 0x6f, 0xbc},
	/* User Plane w/AES CTR enc. UL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xde, 0x0a, 0x59, 0xca, 0x7d, 0x93, 0xa3, 0xb5,
		    0xd2, 0x88, 0xb3, 0x04, 0xa2, 0x12, 0x09},
	/* User Plane w/AES CTR enc. DL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0x69, 0x92, 0x25, 0xd8, 0xe9, 0xd5, 0xe9, 0x53,
		    0x60, 0x49, 0x9f, 0xe9, 0x8f, 0xbe, 0x6a},
	/* User Plane w/AES CTR enc. UL SHORT SN */
	(uint8_t[]){0x8b, 0x0f, 0xa1, 0xf2, 0x56, 0x6e, 0xee, 0x62, 0x1c, 0x62,
		    0x06, 0x7e, 0x38, 0x4a, 0x02, 0xa4},
	/* User Plane w/AES CTR enc. DL SHORT SN */
	(uint8_t[]){0x8b, 0x00, 0x8d, 0x50, 0x80, 0x30, 0xda, 0xc7, 0x14, 0xc5,
		    0xe0, 0xc8, 0xfb, 0x83, 0xd0, 0x73},
	/* User Plane w/AES CTR enc. UL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xa1, 0x2e, 0xa3, 0x64, 0xa9, 0x81, 0xbc, 0xd3,
		    0x6f, 0xef, 0xee, 0x30, 0x71, 0x23, 0x85},
	/* User Plane w/AES CTR enc. DL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xc7, 0xf2, 0x23, 0xb3, 0xbe, 0xc0, 0xdf, 0xc5,
		    0xed, 0x37, 0x35, 0x7c, 0x66, 0xa3, 0xf9},
	/* User Plane w/ZUC enc. UL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0xfb, 0xb6, 0x0e, 0x81, 0xa1, 0x9e, 0xc8, 0xeb,
		    0x90, 0xa8, 0xc7, 0x0e, 0x27, 0xcb, 0xb0},
	/* User Plane w/ZUC enc. DL LONG SN */
	(uint8_t[]){0x8b, 0x26, 0x2f, 0x5d, 0xa4, 0x82, 0xfb, 0xce, 0x1f, 0x3a,
		    0xb5, 0x66, 0x60, 0x40, 0x65, 0x2b, 0x40},
	/* User Plane w/ZUC enc. UL SHORT SN */
	(uint8_t[]){0x8b, 0xcb, 0x75, 0x03, 0xd5, 0xed, 0xea, 0x73, 0x39, 0xf5,
		    0x07, 0x03, 0x04, 0x51, 0xc9, 0x5e},
	/* User Plane w/ZUC enc. DL SHORT SN */
	(uint8_t[]){0x8b, 0xe9, 0xd2, 0x49, 0x7f, 0xfd, 0x98, 0x9f, 0xc4, 0x6a,
		    0xcb, 0xe6, 0x4e, 0x21, 0x33, 0xd2},
	/* User Plane w/ZUC enc. UL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0x01, 0x0a, 0xba, 0x79, 0xf8, 0xe5, 0x9f, 0x22,
		    0x37, 0xab, 0x5c, 0x7e, 0xad, 0xd6, 0x6b},
	/* User Plane w/ZUC enc. DL 15 BIT SN */
	(uint8_t[]){0x8b, 0x26, 0xa3, 0x1a, 0x1e, 0x22, 0xf7, 0x17, 0x8a, 0xb5,
		    0x59, 0xd8, 0x2b, 0x13, 0xdd, 0x12, 0x4e},
	/* Short-MAC w/NULL int. */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0x00, 0x00, 0x00, 0x00},
	/* Short-MAC w/SNOW f9 int. */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0xf6, 0xd0, 0x82, 0x97},
	/* Short-MAC w/AES CMAC int. */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0xb7, 0x6d, 0x74, 0x69},
	/* Short-MAC w/ZUC int. */
	(uint8_t[]){0x8b, 0xad, 0x9c, 0x44, 0x1f, 0x89, 0x0b, 0x38, 0xc4, 0x57,
		    0xa4, 0x9d, 0x42, 0x14, 0x07, 0xe8, 0xcc, 0xc6, 0x1f, 0x92},
};

/* SRTP Test Vectors */
#define SRTP_MAX_ICV_SIZE	20
#define SRTP_AUTH_KEY_SIZE	40
#define SRTP_CIPHER_KEY_SIZE	16
#define SRTP_MAX_BUF_SIZE	130

static uint8_t srtp_reference_auth_key[][SRTP_AUTH_KEY_SIZE] = {
	/* 40 bytes */
	{0x8C, 0x86, 0xC8, 0xF7, 0xF4, 0xC1, 0xF1, 0x4C, 0x4B, 0x9B, 0x29, 0x2B,
	 0x30, 0x3F, 0x39, 0xFA, 0x59, 0x22, 0xC8, 0xF1, 0x16, 0x3B, 0x31, 0x8B,
	 0x9D, 0xBF, 0xAD, 0x78, 0x1B, 0x88, 0xF6, 0xA5, 0xF0, 0x81, 0x1A, 0xE3,
	 0x24, 0xEC, 0x5C, 0x50}
};

static uint8_t srtp_reference_cipher_key[][SRTP_CIPHER_KEY_SIZE] = {
	/* 16 bytes */
	{0xFF, 0x89, 0xCB, 0x85, 0x4F, 0xC0, 0x90, 0x81, 0xCC, 0x47, 0xED, 0xFC,
	 0x86, 0x19, 0xB2, 0x14}
};

static uint8_t srtp_reference_cipher_salt[][SRTP_CIPHER_SALT_LEN] = {
	{0xF7, 0xDE, 0x60, 0x56, 0x8D, 0xE9, 0x89, 0x07, 0x3F, 0x3D, 0x16, 0x39,
	 0x01, 0x80}
};

uint16_t srtp_reference_length[] = {896};

static uint8_t srtp_reference_plaintext[][SRTP_MAX_BUF_SIZE] = {
	/* 112 bytes */
	{0x28, 0x0D, 0x4B, 0xEE, 0x73, 0xAF, 0xEA, 0x79, 0xC8, 0x1E, 0x47, 0x83,
	 0xC6, 0x95, 0x31, 0x39, 0x03, 0xC4, 0x18, 0xF1, 0x2B, 0x4C, 0x1A, 0x34,
	 0x50, 0x6D, 0x73, 0x29, 0xD2, 0x0F, 0x40, 0xC4, 0x19, 0x6F, 0xE2, 0xD7,
	 0x87, 0x1A, 0x99, 0x68, 0x16, 0x09, 0xC3, 0xE7, 0x7E, 0x17, 0x7D, 0x64,
	 0x9B, 0xA5, 0x39, 0x53, 0xA6, 0x88, 0x20, 0xA2, 0x0A, 0x17, 0x8F, 0xEF,
	 0x57, 0x19, 0xC7, 0xF3, 0x5C, 0x4A, 0xBE, 0x2E, 0xA0, 0xD8, 0x97, 0xB7,
	 0x41, 0x71, 0x4D, 0x03, 0x80, 0xF8, 0xFD, 0xCD, 0x06, 0x34, 0xD5, 0xC6,
	 0x02, 0x4C, 0xDB, 0x95, 0xCB, 0x07, 0x4D, 0xC8, 0x4B, 0x4C, 0x2B, 0x14,
	 0x1E, 0x24, 0x67, 0x07, 0x2D, 0xC4, 0x39, 0xF0, 0xFC, 0xD2, 0x60, 0x0D,
	 0x00, 0x00, 0x00, 0x03}
};

static uint8_t srtp_reference_ciphertext[][SRTP_MAX_BUF_SIZE] = {
	/* 127 bytes */
	{0x28, 0x0D, 0x4B, 0xEE, 0x73, 0xAF, 0xEA, 0x79, 0xC8, 0x1E, 0x47, 0x83,
	 0xC6, 0x95, 0x31, 0x39, 0x03, 0xC4, 0x18, 0xF1, 0x2B, 0x4C, 0x1A, 0x34,
	 0x50, 0x6D, 0x73, 0x29, 0xD2, 0x0F, 0x40, 0xC4, 0x19, 0x6F, 0xE2, 0xD7,
	 0x87, 0x1A, 0x99, 0x68, 0x16, 0x09, 0xC3, 0xE7, 0xB0, 0xC4, 0x76, 0x69,
	 0x26, 0xBB, 0x74, 0x74, 0x7D, 0x69, 0xA2, 0xC7, 0x0D, 0xB1, 0x27, 0x51,
	 0x38, 0x1B, 0xBB, 0x59, 0x4B, 0x10, 0xD4, 0x7F, 0x79, 0xD5, 0xDF, 0x48,
	 0x82, 0x5E, 0x8D, 0xAB, 0xBD, 0x36, 0x7F, 0x42, 0xD4, 0x2D, 0xED, 0xEE,
	 0xA0, 0x78, 0x52, 0xDD, 0xF9, 0x5D, 0x45, 0x4C, 0xAA, 0xAA, 0x3C, 0x1B,
	 0x1D, 0xE4, 0xB1, 0xC7, 0x26, 0xAB, 0x2B, 0xCC, 0x24, 0x77, 0x8F, 0x55,
	 0x5A, 0xB3, 0x29, 0x6E, 0x56, 0x62, 0x07, 0x5D, 0x75, 0xFC, 0xC6, 0x4C,
	 0x68, 0xFE, 0x8E, 0xA2, 0x23, 0xF5, 0xDB}
};

static uint32_t srtp_reference_auth_keylen[] = { 40 };
static uint32_t srtp_reference_cipher_keylen[] = { 16 };

static uint8_t srtp_reference_n_tag[] = { 0x0F };
static uint16_t srtp_reference_seq_num[] = { 0x4BEE };
static uint32_t srtp_reference_roc[] = { 0x6AD47CD7 };

/* WIFI Test Vectors - Taken from IEEE 802.11 - 03/131r4 document */
#define WIFI_KEY_SIZE      16
#define WIFI_CCM_HDR_SIZE  8
#define WIFI_ICV_SIZE      8

static uint8_t wifi_reference_key[][WIFI_KEY_SIZE] = {
	/* Test set 1 */
	{0xc9, 0x7c, 0x1f, 0x67, 0xce, 0x37, 0x11, 0x85, 0x51, 0x4a, 0x8a, 0x19,
	 0xf2, 0xbd, 0xd5, 0x2f},
	/* Test set 1 */
	{0x8f, 0x7a, 0x05, 0x3f, 0xa5, 0x77, 0xa5, 0x59, 0x75, 0x29, 0x27, 0x20,
	 0x97, 0xa6, 0x03, 0xd5}
};

static uint16_t wifi_reference_mac_hdr_len[] = {
	/* Test set 1 */
	0x0018,
	/* Test set 2 */
	0x0018
};

static uint64_t wifi_reference_pn[] = {
	/* Test set 1 */
	0xB5039776E70C,
	/* Test set 2 */
	0x31F3CBBA97EA,
};

static uint8_t wifi_reference_pri[] = {
	/* Test set 1 */
	0x00,
	/* Test set 2 */
	0x00
};

static uint8_t wifi_reference_key_id[] = {
	/* Test set 1 */
	0x20,
	/* Test set 2 */
	0xa0
};

/* length in bits */
static uint32_t wifi_reference_length[] = {352, 352};

static uint8_t wifi_reference_plaintext[][MAX_TEST_PLAIN_PACKET_SIZE] = {
	/* Test set 1 */
	{0x08, 0x48, 0xc3, 0x2c, 0x0f, 0xd2, 0xe1, 0x28, 0xa5, 0x7c, 0x50, 0x30,
	 0xf1, 0x84, 0x44, 0x08, 0xab, 0xae, 0xa5, 0xb8, 0xfc, 0xba, 0x80, 0x33,
	 0xf8, 0xba, 0x1a, 0x55, 0xd0, 0x2f, 0x85, 0xae, 0x96, 0x7b, 0xb6, 0x2f,
	 0xb6, 0xcd, 0xa8, 0xeb, 0x7e, 0x78, 0xa0, 0x50},
	 /* Test set 2 */
	{0x38, 0xc0, 0x6a, 0x51, 0xea, 0x10, 0x0c, 0x84, 0x68, 0x50, 0xee, 0xc1,
	 0x76, 0x2c, 0x88, 0xde, 0xaf, 0x2e, 0xe9, 0xf4, 0x6a, 0x07, 0xe0, 0xcc,
	 0x83, 0xa0, 0x63, 0x4b, 0x5e, 0xd7, 0x62, 0x7e, 0xb9, 0xdf, 0x22, 0x5e,
	 0x05, 0x74, 0x03, 0x42, 0xde, 0x19, 0x41, 0x17}
};

static uint8_t wifi_reference_ciphertext[][MAX_TEST_ENCRYPT_PACKET_SIZE] = {
	/* Test set 1 */
	{0x08, 0x48, 0xc3, 0x2c, 0x0f, 0xd2, 0xe1, 0x28, 0xa5, 0x7c, 0x50, 0x30,
	 0xf1, 0x84, 0x44, 0x08, 0xab, 0xae, 0xa5, 0xb8, 0xfc, 0xba, 0x80, 0x33,
	 0x0c, 0xe7, 0x00, 0x20, 0x76, 0x97, 0x03, 0xb5, 0xf3, 0xd0, 0xa2, 0xfe,
	 0x9a, 0x3d, 0xbf, 0x23, 0x42, 0xa6, 0x43, 0xe4, 0x32, 0x46, 0xe8, 0x0c,
	 0x3c, 0x04, 0xd0, 0x19, 0x78, 0x45, 0xce, 0x0b, 0x16, 0xf9, 0x76, 0x23
	},
	/* Test set 2 */
	{0x38, 0xc0, 0x6a, 0x51, 0xea, 0x10, 0x0c, 0x84, 0x68, 0x50, 0xee, 0xc1,
	 0x76, 0x2c, 0x88, 0xde, 0xaf, 0x2e, 0xe9, 0xf4, 0x6a, 0x07, 0xe0, 0xcc,
	 0xea, 0x97, 0x00, 0xa0, 0xba, 0xcb, 0xf3, 0x31, 0x81, 0x4b, 0x69, 0x65,
	 0xd0, 0x5b, 0xf2, 0xb2, 0xed, 0x38, 0xd4, 0xbe, 0xb0, 0x69, 0xfe, 0x82,
	 0x71, 0x4a, 0x61, 0x0b, 0x54, 0x2f, 0xbf, 0x8d, 0xa0, 0x6a, 0xa4, 0xae
	}
};
#endif /* __SIMPLE_PROTO_TEST_VECTOR_H */
